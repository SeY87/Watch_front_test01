디렉토리 gandan/app/api/v1

api.py

```python
from fastapi import APIRouter
from .endpoints import users, videos, vehicles, parkinglots, detections, violations, logs

# API 라우터 인스턴스 생성
api_router = APIRouter()

# 각 엔드포인트 라우터를 메인 라우터에 포함
# prefix: URL 접두사 설정
# tags: Swagger UI에서 API 그룹화를 위한 태그

# 사용자 관련 엔드포인트 (/users/*)
api_router.include_router(users.router, prefix="/users", tags=["Users"])

#비디오 관련 엔드포인트 (video/*)
api_router.include_router(videos.router, prefix="/videos", tags=["Videos"])

# 차량 관련 엔드포인트 (/vehicles/*)
api_router.include_router(vehicles.router, prefix="/vehicles", tags=["Vehicles"])

# 주차장 관련 엔드포인트 (/parkinglots/*)
api_router.include_router(parkinglots.router, prefix="/parkinglots", tags=["Parkinglots"])

# 차량 감지 관련 엔드포인트 (/detections/*)
api_router.include_router(detections.router, prefix="/detections", tags=["Detections"])

# 위반 사항 관련 엔드포인트 (/violations/*)
api_router.include_router(violations.router, prefix="/violations", tags=["Violations"])

# 로그 관련 엔드포인트 (/logs/*)
api_router.include_router(logs.router, prefix="/logs", tags=["Logs"])
```

디렉토리 gandan/app/api/v1/endpoints

user.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.users import UserCreate, UserResponse, UserLogin
from app.models.users import User

'''
비밀번호 후 추가 토근 발급
from fastapi.security import OAuth2PasswordRequestForm
'''
router = APIRouter()

# 사용자 생성
@router.post("/", response_model=UserResponse)
def create_user(user: UserCreate, db: Session = Depends(get_db)):

    '''existing_user = db.query(User).filter(
        (User.username == user.username) | (User.email == user.email)
    ).first()
    if existing_user:
        raise HTTPException(
            status_code=400, detail="Username or email already registered"
        )'''
    # 새로운 사용자 객체 생성 및 데이터베이스에 저장
    db_user = User(**user.model_dump())  # UserCreate 스키마 데이터를 User 모델에 매핑
    db.add(db_user)  # 데이터베이스 세션에 추가
    db.commit()  # 변경사항 커밋
    db.refresh(db_user)  # 새로 생성된 사용자 객체를 데이터베이스로부터 갱신
    return db_user  # 생성된 사용자 반환

# 사용자 조회
@router.get("/{user_id}", response_model=UserResponse)
def read_user(user_id: int, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.user_id == user_id).first()
    if user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return user

# 사용자 목록 조회
@router.get("/", response_model=List[UserResponse])
def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    users = db.query(User).offset(skip).limit(limit).all()
    return users 

# 사용자 로그인
@router.post("/login")
def login(user_login: UserLogin, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == user_login.username).first()
    if not user or not user.verify_password(user_login.password):
        raise HTTPException(status_code=400, detail="Invalid username or password")
    #로그인 성성할 경우 토근 발급 로직은 추후에 추가
    return {"message": "Login successful"} 
```

videos.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.videos import VideoCreate, Video
from app.models.videos import Video as VideoModel

router = APIRouter()
#새로운 비디오 정보 저장
@router.post("/", response_model=Video)
def create_video(video: VideoCreate, db: Session = Depends(get_db)):
    db_video = VideoModel(**video.dict())
    db.add(db_video)
    db.commit()
    db.refresh(db_video)
    return db_video
#모든 비디오 정보 조회
@router.get("/", response_model=List[Video])
def read_videos(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    videos = db.query(VideoModel).offset(skip).limit(limit).all()
    return videos
#특정 비디오 정보 조회
@router.get("/{video_id}", response_model=Video)
def read_video(video_id: int, db: Session = Depends(get_db)):
    video = db.query(VideoModel).filter(VideoModel.video_id == video_id).first()
    if video is None:
        raise HTTPException(status_code=404, detail="Video not found")
    return video 
```

vehicles.py

```python

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.vehicles import VehiclePlateNumber, VehicleTypeResponse, VehicleCreate, VehicleResponse
from app.models.vehicles import Vehicle

router = APIRouter()
#새로운 차량 정보 저장
@router.post("/", response_model=VehicleResponse)
def save_vehicle_info(vehicle: VehicleCreate, db: Session = Depends(get_db)):
    existing_vehicle = db.query(Vehicle).filter(Vehicle.plate_number == vehicle.plate_number).first()
    if existing_vehicle:
        existing_vehicle.vehicle_type = vehicle.vehicle_type
    else:
        new_vehicle = Vehicle(
            plate_number=vehicle.plate_number,
            vehicle_type=vehicle.vehicle_type
        )
        db.add(new_vehicle)
    
    db.commit()
    db.refresh(existing_vehicle or new_vehicle)
    return existing_vehicle or new_vehicle
#특정 차량의 정보 조회
@router.get("/{vehicle_id}", response_model=VehicleResponse)
def read_vehicle(vehicle_id: int, db: Session = Depends(get_db)):
    vehicle = db.query(Vehicle).filter(Vehicle.vehicle_id == vehicle_id).first()
    if vehicle is None:
        raise HTTPException(status_code=404, detail="Vehicle not found")
    return vehicle

@router.get("/", response_model=List[VehicleResponse])
def read_vehicles(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    vehicles = db.query(Vehicle).offset(skip).limit(limit).all()
    return vehicles
```

parkinglots.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.parkinglots import ParkingLotCreate, ParkingLotResponse
from app.models.parkinglots import ParkingLot

router = APIRouter()
#새로운 주차장 정보 저장
@router.post("/", response_model=ParkingLotResponse)
def create_parkinglot(parkinglot: ParkingLotCreate, db: Session = Depends(get_db)):
    db_parkinglot = ParkingLot(**parkinglot.model_dump())
    db.add(db_parkinglot)
    db.commit()
    db.refresh(db_parkinglot)
    return db_parkinglot
#특정 주차장의 정보 조회
@router.get("/{lot_id}", response_model=ParkingLotResponse)
def read_parkinglot(lot_id: int, db: Session = Depends(get_db)):
    parkinglot = db.query(ParkingLot).filter(ParkingLot.lot_id == lot_id).first()
    if parkinglot is None:
        raise HTTPException(status_code=404, detail="Parking lot not found")
    return parkinglot 
```

detections.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.detections import DetectionCreate, DetectionResponse
from app.models.detections import Detection

router = APIRouter()
#탐지 정보 저장
@router.post("/", response_model=DetectionResponse)
def create_detection(detection: DetectionCreate, db: Session = Depends(get_db)):
    db_detection = Detection(**detection.model_dump())
    db.add(db_detection)
    db.commit()
    db.refresh(db_detection)
    return db_detection
#탐지 정보 조회
@router.get("/{detection_id}", response_model=DetectionResponse)
def read_detection(detection_id: int, db: Session = Depends(get_db)):
    detection = db.query(Detection).filter(Detection.detection_id == detection_id).first()
    if detection is None:
        raise HTTPException(status_code=404, detail="Detection not found")
    return detection

@router.get("/vehicle/{vehicle_id}", response_model=List[DetectionResponse])
def read_vehicle_detections(vehicle_id: int, db: Session = Depends(get_db)):
    detections = db.query(Detection).filter(Detection.vehicle_id == vehicle_id).all()
    return detections 
```

violations.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.violations import ViolationCreate, ViolationResponse
from app.models.violations import Violation
from app.utils.fine import calculate_fine

router = APIRouter()

#새로운 위반 정보 생성
@router.post("/", response_model=ViolationResponse)
def create_violation(violation: ViolationCreate, db: Session = Depends(get_db)):
    # 현재 시간 계산
    current_time = violation.violation_time

    # 벌금 계산
    fine_amount = calculate_fine(
        vehicle_number=violation.vehicle_id,
        vehicle_type=violation.vehicle_type,
        current_time=current_time
    )

    # Violation 객체 생성 및 저장
    new_violation = Violation(
        vehicle_id=violation.vehicle_id,
        vehicle_type=violation.vehicle_type,
        fine=violation.fine,
        timestamp=violation.timestamp
    )
    db.add(new_violation)
    db.commit()
    db.refresh(new_violation)

    return new_violation
#특정 위반 정보 조회
@router.get("/{violation_id}", response_model=ViolationResponse)
def read_violation(violation_id: int, db: Session = Depends(get_db)):
    violation = db.query(Violation).filter(Violation.violation_id == violation_id).first()
    if violation is None:
        raise HTTPException(status_code=404, detail="Violation not found")
    return violation

#특정 위반을 해결 상태로 업데이트
@router.put("/{violation_id}/resolve")
def resolve_violation(violation_id: int, db: Session = Depends(get_db)):
    violation = db.query(Violation).filter(Violation.violation_id == violation_id).first()
    if violation is None:
        raise HTTPException(status_code=404, detail="Violation not found")
    violation.resolved = True
    db.commit()
    return {"message": "Violation resolved successfully"} 
```

logs.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.logs import LogCreate, LogResponse
from app.models.logs import Log

router = APIRouter()
#새로운 로그 생성
@router.post("/", response_model=LogResponse)
def create_log(log: LogCreate, db: Session = Depends(get_db)):
    db_log = Log(**log.model_dump())
    db.add(db_log)
    db.commit()
    db.refresh(db_log)
    return db_log
#모든 로그 조회
@router.get("/", response_model=List[LogResponse])
def read_logs(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    logs = db.query(Log).offset(skip).limit(limit).all()
    return logs 
```디렉토리 gandan/app/api/v1

api.py

```python
from fastapi import APIRouter
from .endpoints import users, videos, vehicles, parkinglots, detections, violations, logs

# API 라우터 인스턴스 생성
api_router = APIRouter()

# 각 엔드포인트 라우터를 메인 라우터에 포함
# prefix: URL 접두사 설정
# tags: Swagger UI에서 API 그룹화를 위한 태그

# 사용자 관련 엔드포인트 (/users/*)
api_router.include_router(users.router, prefix="/users", tags=["Users"])

#비디오 관련 엔드포인트 (video/*)
api_router.include_router(videos.router, prefix="/videos", tags=["Videos"])

# 차량 관련 엔드포인트 (/vehicles/*)
api_router.include_router(vehicles.router, prefix="/vehicles", tags=["Vehicles"])

# 주차장 관련 엔드포인트 (/parkinglots/*)
api_router.include_router(parkinglots.router, prefix="/parkinglots", tags=["Parkinglots"])

# 차량 감지 관련 엔드포인트 (/detections/*)
api_router.include_router(detections.router, prefix="/detections", tags=["Detections"])

# 위반 사항 관련 엔드포인트 (/violations/*)
api_router.include_router(violations.router, prefix="/violations", tags=["Violations"])

# 로그 관련 엔드포인트 (/logs/*)
api_router.include_router(logs.router, prefix="/logs", tags=["Logs"])
```

디렉토리 gandan/app/api/v1/endpoints

user.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.users import UserCreate, UserResponse, UserLogin
from app.models.users import User

'''
비밀번호 후 추가 토근 발급
from fastapi.security import OAuth2PasswordRequestForm
'''
router = APIRouter()

# 사용자 생성
@router.post("/", response_model=UserResponse)
def create_user(user: UserCreate, db: Session = Depends(get_db)):

    '''existing_user = db.query(User).filter(
        (User.username == user.username) | (User.email == user.email)
    ).first()
    if existing_user:
        raise HTTPException(
            status_code=400, detail="Username or email already registered"
        )'''
    # 새로운 사용자 객체 생성 및 데이터베이스에 저장
    db_user = User(**user.model_dump())  # UserCreate 스키마 데이터를 User 모델에 매핑
    db.add(db_user)  # 데이터베이스 세션에 추가
    db.commit()  # 변경사항 커밋
    db.refresh(db_user)  # 새로 생성된 사용자 객체를 데이터베이스로부터 갱신
    return db_user  # 생성된 사용자 반환

# 사용자 조회
@router.get("/{user_id}", response_model=UserResponse)
def read_user(user_id: int, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.user_id == user_id).first()
    if user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return user

# 사용자 목록 조회
@router.get("/", response_model=List[UserResponse])
def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    users = db.query(User).offset(skip).limit(limit).all()
    return users 

# 사용자 로그인
@router.post("/login")
def login(user_login: UserLogin, db: Session = Depends(get_db)):
    user = db.query(User).filter(User.username == user_login.username).first()
    if not user or not user.verify_password(user_login.password):
        raise HTTPException(status_code=400, detail="Invalid username or password")
    #로그인 성성할 경우 토근 발급 로직은 추후에 추가
    return {"message": "Login successful"} 
```

videos.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.videos import VideoCreate, Video
from app.models.videos import Video as VideoModel

router = APIRouter()
#새로운 비디오 정보 저장
@router.post("/", response_model=Video)
def create_video(video: VideoCreate, db: Session = Depends(get_db)):
    db_video = VideoModel(**video.dict())
    db.add(db_video)
    db.commit()
    db.refresh(db_video)
    return db_video
#모든 비디오 정보 조회
@router.get("/", response_model=List[Video])
def read_videos(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    videos = db.query(VideoModel).offset(skip).limit(limit).all()
    return videos
#특정 비디오 정보 조회
@router.get("/{video_id}", response_model=Video)
def read_video(video_id: int, db: Session = Depends(get_db)):
    video = db.query(VideoModel).filter(VideoModel.video_id == video_id).first()
    if video is None:
        raise HTTPException(status_code=404, detail="Video not found")
    return video 
```

vehicles.py

```python

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.vehicles import VehiclePlateNumber, VehicleTypeResponse, VehicleCreate, VehicleResponse
from app.models.vehicles import Vehicle

router = APIRouter()
#새로운 차량 정보 저장
@router.post("/", response_model=VehicleResponse)
def save_vehicle_info(vehicle: VehicleCreate, db: Session = Depends(get_db)):
    existing_vehicle = db.query(Vehicle).filter(Vehicle.plate_number == vehicle.plate_number).first()
    if existing_vehicle:
        existing_vehicle.vehicle_type = vehicle.vehicle_type
    else:
        new_vehicle = Vehicle(
            plate_number=vehicle.plate_number,
            vehicle_type=vehicle.vehicle_type
        )
        db.add(new_vehicle)
    
    db.commit()
    db.refresh(existing_vehicle or new_vehicle)
    return existing_vehicle or new_vehicle
#특정 차량의 정보 조회
@router.get("/{vehicle_id}", response_model=VehicleResponse)
def read_vehicle(vehicle_id: int, db: Session = Depends(get_db)):
    vehicle = db.query(Vehicle).filter(Vehicle.vehicle_id == vehicle_id).first()
    if vehicle is None:
        raise HTTPException(status_code=404, detail="Vehicle not found")
    return vehicle

@router.get("/", response_model=List[VehicleResponse])
def read_vehicles(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    vehicles = db.query(Vehicle).offset(skip).limit(limit).all()
    return vehicles
```

parkinglots.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.parkinglots import ParkingLotCreate, ParkingLotResponse
from app.models.parkinglots import ParkingLot

router = APIRouter()
#새로운 주차장 정보 저장
@router.post("/", response_model=ParkingLotResponse)
def create_parkinglot(parkinglot: ParkingLotCreate, db: Session = Depends(get_db)):
    db_parkinglot = ParkingLot(**parkinglot.model_dump())
    db.add(db_parkinglot)
    db.commit()
    db.refresh(db_parkinglot)
    return db_parkinglot
#특정 주차장의 정보 조회
@router.get("/{lot_id}", response_model=ParkingLotResponse)
def read_parkinglot(lot_id: int, db: Session = Depends(get_db)):
    parkinglot = db.query(ParkingLot).filter(ParkingLot.lot_id == lot_id).first()
    if parkinglot is None:
        raise HTTPException(status_code=404, detail="Parking lot not found")
    return parkinglot 
```

detections.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.detections import DetectionCreate, DetectionResponse
from app.models.detections import Detection

router = APIRouter()
#탐지 정보 저장
@router.post("/", response_model=DetectionResponse)
def create_detection(detection: DetectionCreate, db: Session = Depends(get_db)):
    db_detection = Detection(**detection.model_dump())
    db.add(db_detection)
    db.commit()
    db.refresh(db_detection)
    return db_detection
#탐지 정보 조회
@router.get("/{detection_id}", response_model=DetectionResponse)
def read_detection(detection_id: int, db: Session = Depends(get_db)):
    detection = db.query(Detection).filter(Detection.detection_id == detection_id).first()
    if detection is None:
        raise HTTPException(status_code=404, detail="Detection not found")
    return detection

@router.get("/vehicle/{vehicle_id}", response_model=List[DetectionResponse])
def read_vehicle_detections(vehicle_id: int, db: Session = Depends(get_db)):
    detections = db.query(Detection).filter(Detection.vehicle_id == vehicle_id).all()
    return detections 
```

violations.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.violations import ViolationCreate, ViolationResponse
from app.models.violations import Violation
from app.utils.fine import calculate_fine

router = APIRouter()

#새로운 위반 정보 생성
@router.post("/", response_model=ViolationResponse)
def create_violation(violation: ViolationCreate, db: Session = Depends(get_db)):
    # 현재 시간 계산
    current_time = violation.violation_time

    # 벌금 계산
    fine_amount = calculate_fine(
        vehicle_number=violation.vehicle_id,
        vehicle_type=violation.vehicle_type,
        current_time=current_time
    )

    # Violation 객체 생성 및 저장
    new_violation = Violation(
        vehicle_id=violation.vehicle_id,
        vehicle_type=violation.vehicle_type,
        fine=violation.fine,
        timestamp=violation.timestamp
    )
    db.add(new_violation)
    db.commit()
    db.refresh(new_violation)

    return new_violation
#특정 위반 정보 조회
@router.get("/{violation_id}", response_model=ViolationResponse)
def read_violation(violation_id: int, db: Session = Depends(get_db)):
    violation = db.query(Violation).filter(Violation.violation_id == violation_id).first()
    if violation is None:
        raise HTTPException(status_code=404, detail="Violation not found")
    return violation

#특정 위반을 해결 상태로 업데이트
@router.put("/{violation_id}/resolve")
def resolve_violation(violation_id: int, db: Session = Depends(get_db)):
    violation = db.query(Violation).filter(Violation.violation_id == violation_id).first()
    if violation is None:
        raise HTTPException(status_code=404, detail="Violation not found")
    violation.resolved = True
    db.commit()
    return {"message": "Violation resolved successfully"} 
```

logs.py

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from app.core.database import get_db
from app.schemas.logs import LogCreate, LogResponse
from app.models.logs import Log

router = APIRouter()
#새로운 로그 생성
@router.post("/", response_model=LogResponse)
def create_log(log: LogCreate, db: Session = Depends(get_db)):
    db_log = Log(**log.model_dump())
    db.add(db_log)
    db.commit()
    db.refresh(db_log)
    return db_log
#모든 로그 조회
@router.get("/", response_model=List[LogResponse])
def read_logs(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    logs = db.query(Log).offset(skip).limit(limit).all()
    return logs 
```